# -*- mode: Perl -*-
# /=====================================================================\ #
# |  std                                                           | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;
use String::Util 'trim';
use Marpa::R2;
use Data::Dumper;
use Tie::IxHash;

LoadPool('LaTeX');
RequirePackage('listings');

DefMacro('\Cpp', 'C++');
NewCounter('InHeader');
    
DefMacro('\rSec Number [] Plain', sub {
    my $depth = ToString($_[1]);
    my $ref = ToString($_[2]);
    my $name = ToString($_[3]);

    my @res = Tokenize(qq(\\setcounter{SectionDepth}{$depth}
                             \\addtocounter{SectionDepth}{\\value{SectionDepthBase}}
                             \\Sec{\\arabic{SectionDepth}}[$ref]{$name}));
    if($name =~ m/Header\s+\\tcode\{<(\w+)\>}\s+synopsis/) {
	push(@res, (Tokenize('\setcounter{InHeader}{1}'), Invocation(T_CS('\header'), $1)));
    } else {
	push(@res, (Tokenize('\setcounter{InHeader}{0}')));
    }
    return @res;
},

 locked => 1);

DefConstructor('\header{}', 
	       '', 
	       mode => 'text',
	       afterDigest => sub {
		   my ($stomach, $whatsit) = @_;
		   print "Whatsitarg:".ToString($whatsit->getArg(1))."\n";
		   AssignValue('HeaderName', ToString($whatsit->getArg(1)), 'global');
		   return;
	       }
);

my $dsl = <<'END_OF_DSL';
:default ::= action => [name,values]
lexeme default = latm => 1

:start ::= statements

statements ::= statement+ action => do_grammar
statement ::= macro_def action=> do_grammar
    | class_dec
    | class_template_dec
    | class_template_explicit_specialization
    | type_alias_dec
    | enum_class_dec
    | enum_dec
    | comment
    | type_specifier_seq action => do_ignore
    | storage_class_specifier
    | operator
    | <ident>
    | punctuation
    | template_dec


macro_def ::= '#define' <ident> (RestOfLine) action => do_macro
type_alias_dec ::= 'using' <ident> '=' (RestOfLine) action => do_type_alias
class_dec ::= <class keyword> <ident>  (RestOfLine) action => do_class
class_template_dec ::= template_head <class keyword> <ident> non_angle  action => do_class_template
class_template_explicit_specialization ::= <template keyword> ('<') ('>') <class keyword> simple_template_id (RestOfLine) action => do_class_template_specialization
enum_dec ::= <enum keyword> <ident> (RestOfLine) action => do_enum
enum_class_dec ::= <enum keyword> <class keyword> <ident> ':' (RestOfLine) action => do_enum_class
comment ::= '//' (RestOfLine)
template_dec ::= template_head <ident> (RestOfLine)
    | <template keyword> '<' '>' <ident> (RestOfLine)
    | template_head punctuation (RestOfLine)
    | <template keyword> '<' '>' punctuation (RestOfLine)


# A.4 Expressions
id_expression ::= unqualified_id action => do_grammar # TODO: Full definition
unqualified_id ::= identifier action => do_grammar  # TODO: Full definition

# A.6 Declarations
storage_class_specifier ::= <static keyword>
    | <thread_local keyword>
    | <extern keyword>
    | <mutable keyword>

type_specifier ::= simple_type_specifier action => do_grammar # TODO: Full definition
    | cv_qualifier action => do_grammar

type_specifier_seq ::= type_specifier+ action => do_type_specifier_seq # TODO: Full definition

simple_type_specifier ::= type_name action => pass_through # TODO: Full definition

type_name ::= identifier action => do_grammar # TODO: Correct definition

#A.7 Declarators
cv_qualifier ::= <const keyword> action => do_capture | <volatile keyword> action => do_capture

cv_qualifier_seq ::= cv_qualifier+ action => do_grammar;

type_id ::= type_specifier_seq action => pass_through # TODO: Full definition

# A.11 Overloading
operator_function_id ::= (<operator keyword>) operator

operator ::= <new keyword> | <delete keyword> | <new keyword> '[]' | <delete keyword> '[]'
    | '()' | '[]' | '->' | '->*' 
    | '~' | '!' | '+' | '-' | '*' | '/' | '%' | '^' | '&' | '|'
    | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '^=' | '&=' | '|=' | '==' | '!='
    | '<' | '>' | '<=' | '>=' | '<=>' | '&&' | '||' | '<<' | '>>' | '<<=' | '>>='
    | '++' | '--' | ','

# A.12 Templates
template_head ::= (<template keyword>) ('<') template_parameter_list ('>') # TODO: Full definition

template_parameter_list ::= template_parameter action => do_list
    | template_parameter_list (',') template_parameter action => do_list

template_parameter ::= type_parameter action => do_grammar # TODO: Full definition

type_parameter ::= type_parameter_key action => do_grammar
    | type_parameter_key ellipses action => do_grammar
    | type_parameter_key identifier action => do_grammar
    | type_parameter_key ellipses identifier action => do_grammar
    | type_parameter_key ('=') type_id action => do_grammar
    | type_parameter_key identifier ('=') type_id action => do_grammar
    | template_head type_parameter_key action => do_grammar
    | template_head type_parameter_key ellipses action => do_grammar
    | template_head type_parameter_key identifier action => do_grammar
    | template_head type_parameter_key ellipses identifier action => do_grammar
    | type_parameter_key ('=') type_id action => do_grammar
    | type_parameter_key identifier ('=') action => do_grammar


type_parameter_key ::= <class keyword> action => do_capture | <typename keyword> action => do_capture

simple_template_id ::=
    template_name ('<') ('>') action => do_simple_template_id 
    | template_name ('<') template_argument_list ('>') action => do_grammar

template_name ::= <ident> action => do_capture

template_argument_list ::= template_argument action => do_list # TODO: actions
    | template_argument <ellipses keyword>
    | template_argument_list (',') template_argument action => do_list
    | template_argument_list (',') template_argument <ellipses keyword>

template_argument ::= type_id action => do_capture # TODO: Full definition

identifier ::= <ident> action => do_capture
ellipses ::= (<ellipses keyword>) action => do_capture

<ident> ~ [\w]+
punctuation ~ [^\s\w]+
non_angle_char ~ [^<>]
non_angle ~ non_angle_char

# Keywords
:lexeme ~ <class keyword> priority => 1
<class keyword> ~ 'class'

:lexeme ~ <const keyword> priority => 1
<const keyword> ~ 'const'

:lexeme ~ <delete keyword> priority => 1
<delete keyword> ~ 'delete'

:lexeme ~ <enum keyword> priority => 1
<enum keyword> ~ 'enum'

:lexeme ~ <extern keyword> priority => 1
<extern keyword> ~ 'extern'

:lexeme ~ <mutable keyword> priority => 1
<mutable keyword> ~ 'mutable'

:lexeme ~ <new keyword> priority => 1
<new keyword> ~ 'new'

:lexeme ~ <operator keyword> priority => 1
<operator keyword> ~ 'operator'

:lexeme ~ <static keyword> priority => 1
<static keyword> ~ 'static'

:lexeme ~ <template keyword> priority => 1
<template keyword> ~ 'template'

:lexeme ~ <thread_local keyword> priority => 1
<thread_local keyword> ~ 'thread_local'

:lexeme ~ <typename keyword> priority => 1
<typename keyword> ~ 'typename'

:lexeme ~ <volatile keyword> priority => 1
<volatile keyword> ~ 'volatile'

:lexeme ~ <ellipses keyword> priority => 1
<ellipses keyword> ~ '...'

# See https://stackoverflow.com/questions/25800789/discard-and-skip-over-unstructured-text-with-perl-marpa
RestOfLine
  ::=           action => ::undef  # rest is optional
RestOfLine
  ::= THE_REST  action => ::undef  # matches anything

:lexeme ~ THE_REST priority => 1
THE_REST ~ [^\n]+

:discard ~ whitespace
whitespace ~ [\s]+

END_OF_DSL


my $grammar = Marpa::R2::Scanless::G->new( { source => \$dsl } );
my $recce;

my $doc;

sub insertXML {
    my ($doc, $tree) = @_;
    if(ref($tree) eq "") {
	$doc->absorb($tree);
	return;
    }
    foreach my $key (keys %$tree) {
	if(ref($$tree{$key}) eq "ARRAY") {
	    my $values = $$tree{$key};
	    foreach my $value (@$values) {
		$doc->openElement('ltx:note', role => $key);
		insertXML($doc, $value);
		$doc->closeElement('ltx:note');
	    }
	} else {
	    $doc->openElement('ltx:note', role => $key);
	    insertXML($doc, $$tree{$key});
	    $doc->closeElement('ltx:note');
	}
    }
}

sub match_text {
    my @g1 = Marpa::R2::Context::location();
    my @span1 = $recce->g1_location_to_span($g1[0]);
    my @span2 = $recce->g1_location_to_span($g1[1]);
    return trim($recce->literal($span1[0] + $span1[1], $span2[0] + $span2[1] - $span1[0] - $span1[1]));
}
    
sub CodeProcess::do_dump {
    print "matched: ".match_text()."\n";
    print Dumper(@_);
}

sub CodeProcess::pass_through {
    return $_[1];
}

sub CodeProcess::do_ignore {
    my $unignored = CodeProcess::do_grammar(@_);
    my ($key) = keys %$unignored;
    return { $key => { ignore => $$unignored{$key} } }
}

sub CodeProcess::do_grammar {
    my (undef, @args) = @_;
    my $rule_id     = $Marpa::R2::Context::rule;
    my $slg         = $Marpa::R2::Context::slg;

    my $is_quantitative = sub {
	my ($rule_id) = @_;
	if (substr($slg->rule_show($rule_id), -1) eq "+") {
	    return 1;
	}
	return 0;
    };
    
    my $nonterminal = $slg->symbol_display_form(($slg->rule_expand($rule_id))[0]);
    $nonterminal=~s/_/-/g;
    my %result;
    tie(%result, 'Tie::IxHash');

    if($is_quantitative->($rule_id)) {
	my $arg0 = $args[0];
	my ($key) = keys %$arg0;
	my @values = map { $$_{$key} } grep { $_} @args;
	$result{$key} = \@values;
    } else {
	map { my $arg = $_; map { $result{$_} = $$arg{$_} } keys %$arg; } @args;
    }
    $result{match} = match_text();
    return { $nonterminal => \%result };
}

sub CodeProcess::do_capture {
    my (undef, @args) = @_;
    my $rule_id     = $Marpa::R2::Context::rule;
    my $slg         = $Marpa::R2::Context::slg;
    my $nonterminal = $slg->symbol_display_form(($slg->rule_expand($rule_id))[0]);
    $nonterminal=~s/_/-/g;
    return { $nonterminal => $_[1] };
}

sub CodeProcess::do_list {
    my (undef, @args) = @_;
    my $rule_id     = $Marpa::R2::Context::rule;
    my $slg         = $Marpa::R2::Context::slg;
    my $nonterminal = $slg->symbol_display_form(($slg->rule_expand($rule_id))[0]);
    $nonterminal=~s/_/-/g;
    if(scalar(@args) == 1) {
	return { $nonterminal => [$_[1]] };
    }
    my(undef, $args_so_far, $new_arg) = @_;
    my @result = @$$args_so_far{$nonterminal};
    push(@result, @$new_arg);
    return { $nonterminal => \@result };
}

sub CodeProcess::do_class {
    return { 'class-template' => {
	name => $_[2],
	match => match_text
	     }
    }
}

sub CodeProcess::do_class_template {
    return { 'class-template' => {
	name => $_[3],
	match => match_text
	     }
    }
}

sub CodeProcess::do_class_template_specialization {
    print "Class_template_specialization\n";

    my $simple_template_id = $_[3];
    return { 'class-template-specialization' => {
	name => $$simple_template_id{'simple-template-id'}{match},
	map { $_ =>  $$simple_template_id{$_}} keys %$simple_template_id,
	match => match_text
	     }
    }
}

sub CodeProcess::do_macro {
    print "doing a macro\n";
    return { macro => {
	name => $_[2],
	match => match_text
	     }
    }
}

sub CodeProcess::do_type_alias {
    return { 'type-alias' => {
	name => $_[2],
	match => match_text
	     }
    }
}

sub CodeProcess::do_enum_class {
    return { 'enum-class' => {
	name => $_[3],
	match => match_text
	     }
    }
}

sub CodeProcess::do_enum {
    return { 'enum' => {
	name => $_[3],
	match => match_text
	     }
    }
}


sub CodeProcess::do_type_specifier_seq {
    (undef, my @args) = @_;
    # Follow the rules in dcl.type/2 for valid type-specifier-seqs
    my %counts = ( const => 0, volatile => 0 );
    map { my $match = $$_{'type-specifier'}{match};
	  $counts{$match}++;
    } @args;
    if($counts{const} > 1 || $counts{volatile} > 1) {
	Marpa::R2::Context::bail("Duplicate const or volatile (dcl.type/2): ".match_text());
    }
	
    return CodeProcess::do_grammar(@_);
}

# A.12 Templates
sub CodeProcess::do_simple_template_id {
    my %result;
    tie(%result, 'Tie::IxHash', 'template-name' => $_[1],  'template-argument-list' => [], 'match' => match_text());
    return { "simple-template-id" => \%result};
}

DefConstructor('\@@listings@block {} {}',
	       sub {
		   my ($document, $index, $content, %props) = @_;
		   my $inHeader = $props{inHeader};
		   
		   if($inHeader) {
		       my $headerName = $props{headerName};
		       my $data_key      = 'LISTINGS_DATA_' . ToString($index);
		       my $listings_data = LookupValue($data_key);
		       $doc = $document;
		       
		       # print 'Dumping\n'.Dumper($value_ref);
		       print "HeaderName: $headerName\n";
		       $document->openElement('ltx:note', role => 'header', class => $headerName);
		       # my $value_ref = $grammar->parse( \$listings_data, 'CodeProcess');
		       $recce = Marpa::R2::Scanless::R->new( { grammar => $grammar,
							       semantics_package => 'CodeProcess' } );
		       my $length_read = $recce->read( \$listings_data );
		       my $value_ref = $recce->value;
		       my $value = ${$value_ref};
		       $document->closeElement('ltx:note');
		   }
		   $document->insertElement('ltx:listing',
					    $content,
					    data => $props{data},
					    datamimetype => $props{datamimetype},
					    dataencoding => $props{dataencoding}); },
	       afterDigest => sub {
		   my ($stomach, $whatsit) = @_;
		   # Could have some options about encoding?
		   my $data_key      = 'LISTINGS_DATA_' . ToString($whatsit->getArg(1));
		   print "std - $data_key\n";
		   my $listings_data = LookupValue($data_key);
		   if (is_utf8($listings_data)) {
		       $listings_data = encode('UTF-8', $listings_data);
		   }
		   my $data = encode_base64($listings_data);

		   my $inHeader = CounterValue('InHeader')->valueOf;
		   if($inHeader) {
	       		   print "AfterDigestHeaderName: ".LookupValue('HeaderName')."\n";
		   }
		   $whatsit->setProperties(data => $data,
					   inHeader => $inHeader,
					   headerName => LookupValue('HeaderName'),
					   datamimetype => 'text/plain',
					   dataencoding => 'base64'); },
	       locked => 1);

DefConstructor('\testConst {} {}', 
    sub {   my ($document, $one, $two, %props) = @_; 
            $document->absorb(Tokenize($props{foo})); },
    # '#foo',
    afterDigest => sub {
	my ($stomach, $whatsit) = @_;
	print $whatsit->getDefinition;
    # Could have some options about encoding?
    $whatsit->setProperties(foo => '<ltx:note></ltx:note>');},
  locked => 1);

#======================================================================
DefConstructor('\foo', sub {
    $doc = $_[0];
    print "Running style file\n\n\n";
    my $grammar = Marpa::R2::Scanless::G->new( { source => \$dsl } );
    $recce = Marpa::R2::Scanless::R->new(
	{ grammar => $grammar, semantics_package => 'CodeProcess' } );

    my $input = << 'EOF';
#define foo bar
const x volatile volatile
EOF
    print "Starting\n";
    my $length_read = $recce->read( \$input );
    my $value_ref;
    do {
	eval {
	    $value_ref = $recce->value;
	};
    } while ($@);
    insertXML($doc, $$value_ref);
	       });
 
1;

