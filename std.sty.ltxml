# -*- mode: Perl -*-
# /=====================================================================\ #
# |  std                                                           | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;
use String::Util 'crunch';
use Marpa::R2;
use Data::Dumper;

LoadPool('LaTeX');
RequirePackage('listings');

DefMacro('\Cpp', 'C++');
DefMacro('\Cpp', 'D++');
NewCounter('InHeader');
    
DefMacro('\rSec Number [] Plain', sub {
    my $depth = ToString($_[1]);
    my $ref = ToString($_[2]);
    my $name = ToString($_[3]);

    my @res = Tokenize(qq(\\setcounter{SectionDepth}{$depth}
                             \\addtocounter{SectionDepth}{\\value{SectionDepthBase}}
                             \\Sec{\\arabic{SectionDepth}}[$ref]{$name}));
    if($name =~ m/Header\s+\\tcode\{<(\w+)\>}\s+synopsis/) {
	push(@res, (Tokenize('\setcounter{InHeader}{1}'), Invocation(T_CS('\header'), $1)));
    } else {
	push(@res, (Tokenize('\setcounter{InHeader}{0}')));
    }
    return @res;
},

 locked => 1);

DefConstructor('\header{}', 
	       '', 
	       mode => 'text',
	       afterDigest => sub {
		   my ($stomach, $whatsit) = @_;
		   print "Whatsitarg:".ToString($whatsit->getArg(1))."\n";
		   AssignValue('HeaderName', ToString($whatsit->getArg(1)), 'global');
		   return;
	       }
);

my $dsl = <<'END_OF_DSL';
:default ::= action => [name,values]
lexeme default = latm => 1

:start ::= statements

#                    | '<' non_angle* balanced_angles non_angle* '>'
template_introducer ::= <template keyword> balanced_angles action => do_template_introducer
statements ::= statement+
statement ::= macro_def
    | class_dec
    | class_template_dec
    | class_template_specialization_dec
    | type_alias_dec
    | enum_class_dec
    | enum_dec
    | comment
    | storage_class_specifier
    | operator_function_id
    | operator
    | identifier 
    | punctuation
    | template_dec


macro_def ::= '#define' identifier (RestOfLine) action => do_macro
type_alias_dec ::= 'using' identifier '=' (RestOfLine) action => do_type_alias
class_dec ::= <class keyword> identifier  (RestOfLine) action => do_class
class_template_dec ::= template_introducer <class keyword> identifier non_angle  action => do_class_template


class_template_specialization_dec ::= template_introducer <class keyword> identifier balanced_angles (RestOfLine) action => do_class_template_specialization
enum_dec ::= <enum keyword> identifier (RestOfLine) action => do_enum
enum_class_dec ::= <enum keyword> <class keyword> identifier ':' (RestOfLine) action => do_enum_class
comment ::= '//' (RestOfLine)
template_dec ::= template_introducer identifier (RestOfLine)
    | template_introducer punctuation (RestOfLine)


# A.4 Expressions
unqualified_id ::= identifier  # TODO: Full definition

# A.6 Declarations
storage_class_specifier ::= <static keyword>
    | <thread_local keyword>
    | <extern keyword>
    | <mutable keyword>

# A.11 Overloading
operator_function_id ::= <operator keyword> operator

operator ::= <new keyword> | <delete keyword> | <new keyword> '[]' | <delete keyword> '[]'
    | '()' | '[]' | '->' | '->*' | '~' | '!' | '+' | '-' | '*' | '/' | '%' | '^' | '&' | '|'
    | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '^=' | '&=' | '|=' | '==' | '!='
    | '<' | '>' | '<=' | '>=' | '<=>' | '&&' | '||' | '<<' | '>>' | '<<=' | '>>='
    | '++' | '--' | ','

# This seems to be best due to limited handling of optional in Scanless:DSL
# See http://savage.net.au/Perl-modules/html/marpa.faq/faq.html#q147
balanced_angles ::= '<>' action => do_join
    | '<' non_angles '>' action => do_join
    | '<' non_angles balanced_angles '>' action => do_join
    | '<' balanced_angles non_angles '>' action => do_join
    | '<' non_angles balanced_angles non_angles '>' action => do_join

identifier ~ [\w]+
punctuation ~ [^\s\w]+
non_angle_char ~ [^<>]
non_angle ~ non_angle_char
non_angles ~ non_angle_char+

# Keywords
:lexeme ~ <class keyword> priority => 1
<class keyword> ~ 'class'

:lexeme ~ <delete keyword> priority => 1
<delete keyword> ~ 'delete'

:lexeme ~ <enum keyword> priority => 1
<enum keyword> ~ 'enum'

:lexeme ~ <extern keyword> priority => 1
<extern keyword> ~ 'extern'

:lexeme ~ <mutable keyword> priority => 1
<mutable keyword> ~ 'mutable'

:lexeme ~ <new keyword> priority => 1
<new keyword> ~ 'new'

:lexeme ~ <operator keyword> priority => 1
<operator keyword> ~ 'operator'

:lexeme ~ <static keyword> priority => 1
<static keyword> ~ 'static'

:lexeme ~ <template keyword> priority => 1
<template keyword> ~ 'template'

:lexeme ~ <thread_local keyword> priority => 1
<thread_local keyword> ~ 'thread_local'

# See https://stackoverflow.com/questions/25800789/discard-and-skip-over-unstructured-text-with-perl-marpa
RestOfLine
  ::=           action => ::undef  # rest is optional
RestOfLine
  ::= THE_REST  action => ::undef  # matches anything

:lexeme ~ THE_REST priority => 1
THE_REST ~ [^\n]+

:discard ~ whitespace
whitespace ~ [\s]+

END_OF_DSL


my $grammar = Marpa::R2::Scanless::G->new( { source => \$dsl } );
my $recce;

my $doc;

sub match_text {
    my @g1 = Marpa::R2::Context::location();
    my @span1 = $recce->g1_location_to_span($g1[0]);
    my @span2 = $recce->g1_location_to_span($g1[1]);
    return crunch($recce->literal($span1[0] + $span1[1], $span2[0] + $span2[1] - $span1[0] - $span1[1]));
}

sub CodeProcess::do_template_introducer {

    # print "doing template introducer\n".Dumper(@_)."\n";
}

sub CodeProcess::do_class {
    print "in class\n";
    $doc->openElement('ltx:note', role => 'declaration', class => 'class');
    $doc->insertElement('ltx:note', $_[2], role => 'name');
    $doc->insertElement('ltx:note', match_text(), role => 'text');
    $doc->closeElement('ltx:note');
}

sub CodeProcess::do_class_template {
    print "in class template\n";
    $doc->openElement('ltx:note', role => 'declaration', class => 'class-template');
    $doc->insertElement('ltx:note', $_[3], role => 'name');
    $doc->insertElement('ltx:note', match_text(), role => 'text');
    $doc->closeElement('ltx:note');
}

sub CodeProcess::do_class_template_specialization {
    $doc->openElement('ltx:note', role => 'declaration', class => 'class-template-specialization');
    $doc->insertElement('ltx:note', $_[3].$_[4], role => 'name');
    $doc->insertElement('ltx:note', $_[3], role => 'primary-template-name');
    $doc->insertElement('ltx:note', match_text(), role => 'text');
    $doc->closeElement('ltx:note');
}

sub CodeProcess::do_macro {
    $doc->openElement('ltx:note', role => 'declaration', class => 'macro');
    $doc->insertElement('ltx:note', $_[2], role => 'name');
    $doc->insertElement('ltx:note', match_text(), role => 'text');
    $doc->closeElement('ltx:note');
}

sub CodeProcess::do_type_alias {
    $doc->openElement('ltx:note', role => 'declaration', class => 'type-alias');
    $doc->insertElement('ltx:note', $_[2], role => 'name');
    $doc->insertElement('ltx:note', match_text(), role => 'text');
    $doc->closeElement('ltx:note');
}

sub CodeProcess::do_enum_class {
    $doc->openElement('ltx:note', role => 'declaration', class => 'enum-class');
    $doc->insertElement('ltx:note', $_[3], role => 'name');
    $doc->insertElement('ltx:note', match_text(), role => 'text');
    $doc->closeElement('ltx:note');
}

sub CodeProcess::do_enum {
    $doc->openElement('ltx:note', role => 'declaration', class => 'enum');
    $doc->insertElement('ltx:note', $_[3], role => 'name');
    $doc->insertElement('ltx:note', match_text(), role => 'text');
    $doc->closeElement('ltx:note');
}


sub CodeProcess::do_join {
    (undef, my @args) = @_;
    return join('', @args);
}


DefConstructor('\@@listings@block {} {}',
	       sub {
		   my ($document, $index, $content, %props) = @_;
		   my $inHeader = $props{inHeader};
		   
		   if($inHeader) {
		       my $headerName = $props{headerName};
		       my $data_key      = 'LISTINGS_DATA_' . ToString($index);
		       my $listings_data = LookupValue($data_key);
		       $doc = $document;
		       
		       # print 'Dumping\n'.Dumper($value_ref);
		       print "HeaderName: $headerName\n";
		       $document->openElement('ltx:note', role => 'header', class => $headerName);
		       # my $value_ref = $grammar->parse( \$listings_data, 'CodeProcess');
		       $recce = Marpa::R2::Scanless::R->new( { grammar => $grammar,
							       semantics_package => 'CodeProcess' } );
		       my $length_read = $recce->read( \$listings_data );
		       my $value_ref = $recce->value;
		       my $value = ${$value_ref};
		       $document->closeElement('ltx:note');
		   }
		   $document->insertElement('ltx:listing',
					    $content,
					    data => $props{data},
					    datamimetype => $props{datamimetype},
					    dataencoding => $props{dataencoding}); },
	       afterDigest => sub {
		   my ($stomach, $whatsit) = @_;
		   # Could have some options about encoding?
		   my $data_key      = 'LISTINGS_DATA_' . ToString($whatsit->getArg(1));
		   print "std - $data_key\n";
		   my $listings_data = LookupValue($data_key);
		   if (is_utf8($listings_data)) {
		       $listings_data = encode('UTF-8', $listings_data);
		   }
		   my $data = encode_base64($listings_data);

		   my $inHeader = CounterValue('InHeader')->valueOf;
		   if($inHeader) {
	       		   print "AfterDigestHeaderName: ".LookupValue('HeaderName')."\n";
		   }
		   $whatsit->setProperties(data => $data,
					   inHeader => $inHeader,
					   headerName => LookupValue('HeaderName'),
					   datamimetype => 'text/plain',
					   dataencoding => 'base64'); },
	       locked => 1);

DefConstructor('\testConst {} {}', 
    sub {   my ($document, $one, $two, %props) = @_; 
            $document->absorb(Tokenize($props{foo})); },
    # '#foo',
    afterDigest => sub {
	my ($stomach, $whatsit) = @_;
	print $whatsit->getDefinition;
    # Could have some options about encoding?
    $whatsit->setProperties(foo => '<ltx:note></ltx:note>');},
  locked => 1);

#======================================================================
1;

