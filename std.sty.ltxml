# -*- mode: Perl -*-
# /=====================================================================\ #
# |  std                                                           | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;
use String::Util 'trim';
use List::Util 'sum';
use Marpa::R2;
use Data::Dumper;
use Tie::IxHash;

LoadPool('LaTeX');
# RequirePackage('listings');

DefMacro('\Cpp', 'C++');
NewCounter('InHeader');
    
DefMacro('\rSec Number [] Plain', sub {
    my $depth = ToString($_[1]);
    my $ref = ToString($_[2]);
    my $name = ToString($_[3]);

    my @res = Tokenize(qq(\\setcounter{SectionDepth}{$depth}
                             \\addtocounter{SectionDepth}{\\value{SectionDepthBase}}
                             \\Sec{\\arabic{SectionDepth}}[$ref]{$name}));
    if($name =~ m/Header\s+\\tcode\{<(\w+)\>}\s+synopsis/) {
	push(@res, (Tokenize('\setcounter{InHeader}{1}'), Invocation(T_CS('\header'), $1)));
    } else {
	push(@res, (Tokenize('\setcounter{InHeader}{0}')));
    }
    return @res;
},

 locked => 1);

DefConstructor('\header{}', 
	       '', 
	       mode => 'text',
	       afterDigest => sub {
		   my ($stomach, $whatsit) = @_;
		   print "Whatsitarg:".ToString($whatsit->getArg(1))."\n";
		   AssignValue('HeaderName', ToString($whatsit->getArg(1)), 'global');
		   return;
	       }
);

my $dsl = <<'END_OF_DSL';
:default ::= action => [name,values]
lexeme default = latm => 1

:start ::= declaration_seq

macro_def ::= '#define' <ident> (RestOfLine) action => do_macro
type_alias_dec ::= <using keyword> identifier '=' (RestOfLine) action => do_type_alias
class_dec ::= <class keyword> <ident>  (RestOfLine) action => do_class
class_template_dec ::= template_head <class keyword> <ident> non_angle  action => do_class_template
class_template_explicit_specialization ::= (<template keyword>) ('<') ('>') class_key simple_template_id (RestOfLine) action => do_grammar
enum_dec ::= <enum keyword> <ident> (RestOfLine) action => do_enum
enum_class_dec ::= <enum keyword> <class keyword> <ident> ':' (RestOfLine) action => do_enum_class
comment ::= '//' (RestOfLine) action => do_capture_all
template_dec ::= template_head <ident> (RestOfLine) action => do_capture_all
    | <template keyword> '<' '>' <ident> (RestOfLine) action => do_capture_all
    | template_head punctuation (RestOfLine) action => do_capture_all
    | <template keyword> '<' '>' punctuation (RestOfLine) action => do_capture_all

# A.2 Lexical Conventions
token ::= identifier action => do_grammar # TODO: Full definition and propagate changes to balanced_token
    | operator action => do_grammar

string_literal ::= ('"') s_char_sequence ('"') action => do_capture

s_char_sequence ~ s_char+
s_char ~ [^"\\\n]

# A.4 Expressions
id_expression ::= unqualified_id action => do_grammar # TODO: Full definition
unqualified_id ::= identifier action => do_grammar  # TODO: Full definition

# A.6 Declarations
declaration_seq ::= declaration+ action => do_grammar

declaration ::= simple_declaration action => do_grammar
    | namespace_definition action => do_grammar
    | linkage_specification action => do_grammar
    | macro_def action=> do_grammar # TODO: Correct definition
    | class_dec action => do_grammar
    | class_template_dec action => do_grammar
    | class_template_explicit_specialization action => do_grammar
    | type_alias_dec action => do_grammar
    | enum_class_dec action => do_grammar
    | enum_dec action => do_grammar
    | comment action => do_ignore rank => -1
    | storage_class_specifier action => do_ignore rank => -1
    | operator action => do_ignore rank => -1
    | identifier action => do_ignore rank => -1
    | punctuation action => do_ignore rank => -1
    | template_dec action => do_ignore rank => -1


simple_declaration ::= decl_specifier_seq (';') action => do_grammar
    | decl_specifier_seq init_declarator_list (';') action => do_grammar
    | attribute_specifier_seq decl_specifier_seq (';') action => do_grammar
    | attribute_specifier_seq decl_specifier_seq init_declarator_list (';') action => do_grammar

decl_specifier ::= storage_class_specifier action => do_grammar # TODO: Full definition
    | defining_type_specifier action => do_grammar

decl_specifier_seq ::= decl_specifier+ action => do_grammar # TODO: Full definition

storage_class_specifier ::= <static keyword> action => do_capture
    | <thread_local keyword> action => do_capture
    | <extern keyword> action => do_capture
    | <mutable keyword> action => do_capture

type_specifier ::= simple_type_specifier action => do_grammar # TODO: Full definition
    | cv_qualifier action => do_grammar

type_specifier_seq ::= type_specifier+ action => do_type_specifier_seq # TODO: Full definition

defining_type_specifier ::= type_specifier action => do_grammar # TODO: Full definition

simple_type_specifier ::= type_name action => do_grammar # TODO: Full definition
    | <char keyword> action => do_capture
    | <char16_t keyword> action => do_capture
    | <char32_t keyword> action => do_capture
    | <wchar_t keyword> action => do_capture
    | <bool keyword> action => do_capture
    | <short keyword> action => do_capture
    | <int keyword> action => do_capture
    | <long keyword> action => do_capture
    | <signed keyword> action => do_capture
    | <unsigned keyword> action => do_capture
    | <float keyword> action => do_capture
    | <double keyword> action => do_capture
    | <void keyword> action => do_capture
    | <auto keyword> action => do_capture


type_name ::= identifier action => do_grammar # TODO: Correct definition

namespace_definition ::= named_namespace_definition action => do_grammar # TODO: Full definition

named_namespace_definition # TODO: Full definition
    ::= (<namespace keyword>) identifier ('{') namespace_body ('}') action => do_grammar
        |  (<namespace keyword>) identifier ('{') ('}') action => do_grammar

namespace_body ::= declaration_seq action => do_grammar;

linkage_specification ::= (<extern keyword>) string_literal ('{') ('}') action => do_grammar
    | (<extern keyword>) string_literal ('{') declaration_seq ('}') action => do_grammar
    |  (<extern keyword>) string_literal declaration action => do_grammar

attribute_specifier_seq ::= attribute_specifier+ action => do_grammar

attribute_specifier ::= ('[') ('[') attribute_list (']') (']') action => do_grammar 

attribute_list ::= attribute+ separator => <comma keyword> action => do_grammar # TODO: full specification

attribute ::= attribute_token action => do_grammar
    | attribute_token attribute_argument_clause action => do_grammar

attribute_token ::= identifier action => do_grammar # TODO: full definition

attribute_argument_clause ::= ('(') (')') action => do_capture
    | ('(') (')') action => do_grammar

balanced_token_seq ::= balanced_token+ action => do_grammar

balanced_token ::= '(' balanced_token_seq ')' action => do_balanced_token
    | '[' balanced_token_seq ']' action => do_balanced_token
    | '{' balanced_token_seq '}' action => do_balanced_token
    | token action => do_grammar # TODO: Change when tokens include grouping characters

#A.7 Declarators
init_declarator_list ::= init_declarator+ separator => <comma keyword> action => do_grammar

init_declarator ::= declarator action => do_grammar # TODO: Full definition

declarator ::= ptr_declarator action => do_grammar # TODO: Full definition

ptr_declarator ::= noptr_declarator action => do_grammar
    | ptr_operator noptr_declarator action => do_grammar

noptr_declarator ::= declarator_id action => do_grammar # TODO: Full definition
    | noptr_declarator parameters_and_qualifiers action => do_grammar

parameters_and_qualifiers ::= ('(') parameter_declaration_clause (')') <optional noexcept_specifier> action => do_grammar # TODO: Full definition
    | ('(') (')') <optional noexcept_specifier> action => do_grammar

ptr_operator ::= '*' action => do_capture # TODO: Full definition
    | '&' action => do_capture
    | '&&' action => do_capture

cv_qualifier ::= <const keyword> action => do_capture | <volatile keyword> action => do_capture

cv_qualifier_seq ::= cv_qualifier+ action => do_grammar;

declarator_id ::= id_expression action => do_grammar 
    | ellipses id_expression action => do_grammar

type_id ::= type_specifier_seq action => pass_through # TODO: Full definition

parameter_declaration_clause ::= parameter_declaration_list action => do_grammar # TODO: Full definition

parameter_declaration_list ::=                                # TODO: Full definition
    parameter_declaration+ separator => <comma keyword> action => do_grammar

parameter_declaration ::= decl_specifier_seq declarator action => do_grammar # TODO: Full definition

# A.8 Classes
class_key ::= <class keyword> action => do_capture
    | <struct keyword> action => do_capture
    | <union keyword> action => do_capture

# A.11 Overloading
operator_function_id ::= (<operator keyword>) operator

operator ::= operator_raw action => do_operator

operator_raw ::= <new keyword> | <delete keyword> | <new keyword> '[]' | <delete keyword> '[]'
    | '()' | '[]' | '->' | '->*' 
    | '~' | '!' | '+' | '-' | '*' | '/' | '%' | '^' | '&' | '|'
    | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '^=' | '&=' | '|=' | '==' | '!='
    | '<' | '>' | '<=' | '>=' | '<=>' | '&&' | '||' | '<<' | '>>' | '<<=' | '>>='
    | '++' | '--' | ','

# A.12 Templates
template_head ::= (<template keyword>) ('<') template_parameter_list ('>') action => do_grammar # TODO: Full definition

template_parameter_list ::= template_parameter action => do_list
    | template_parameter_list (',') template_parameter action => do_list

template_parameter ::= type_parameter action => do_grammar # TODO: Full definition

type_parameter ::= type_parameter_key action => do_grammar
    | type_parameter_key ellipses action => do_grammar
    | type_parameter_key identifier action => do_grammar
    | type_parameter_key ellipses identifier action => do_grammar
    | type_parameter_key ('=') type_id action => do_grammar
    | type_parameter_key identifier ('=') type_id action => do_grammar
    | template_head type_parameter_key action => do_grammar
    | template_head type_parameter_key ellipses action => do_grammar
    | template_head type_parameter_key identifier action => do_grammar
    | template_head type_parameter_key ellipses identifier action => do_grammar
    | type_parameter_key ('=') type_id action => do_grammar
    | type_parameter_key identifier ('=') action => do_grammar


type_parameter_key ::= <class keyword> action => do_capture | <typename keyword> action => do_capture

simple_template_id ::=
    template_name ('<') ('>') action => do_simple_template_id 
    | template_name ('<') template_argument_list ('>') action => do_grammar

template_name ::= <ident> action => do_capture

template_argument_list ::= template_argument action => do_list # TODO: actions
    | template_argument <ellipses keyword>
    | template_argument_list (',') template_argument action => do_list
    | template_argument_list (',') template_argument <ellipses keyword>

template_argument ::= type_id action => do_capture # TODO: Full definition

# A.13 Exception handling
noexcept_specifier ::= <noexcept keyword> action => do_capture # TODO: Full definition
<optional noexcept_specifier> ::= noexcept_specifier action => do_grammar
<optional noexcept_specifier> ::= action => do_grammar

identifier ::= <ident> action => do_capture
    | standard_directive action => do_grammar

standard_directive ::= ('@') non_at ('@') action => do_capture
punctuation ::= <punctuation token> action => do_capture
ellipses ::= (<ellipses keyword>) action => do_capture

<ident> ~ [\w]+
<punctuation token> ~ [^\s\w]
non_angle_char ~ [^<>]
non_angle ~ non_angle_char
non_at ~ [^@]+

# Keywords
:lexeme ~ <auto keyword> priority => 1
<auto keyword> ~ 'auto'

:lexeme ~ <bool keyword> priority => 1
<bool keyword> ~ 'bool'

:lexeme ~ <char keyword> priority => 1
<char keyword> ~ 'char'

:lexeme ~ <char16_t keyword> priority => 1
<char16_t keyword> ~ 'char16_t'

:lexeme ~ <char32_t keyword> priority => 1
<char32_t keyword> ~ 'char32_t'

:lexeme ~ <class keyword> priority => 1
<class keyword> ~ 'class'

:lexeme ~ <const keyword> priority => 1
<const keyword> ~ 'const'

:lexeme ~ <delete keyword> priority => 1
<delete keyword> ~ 'delete'

:lexeme ~ <double keyword> priority => 1
<double keyword> ~ 'double'

:lexeme ~ <enum keyword> priority => 1
<enum keyword> ~ 'enum'

:lexeme ~ <extern keyword> priority => 1
<extern keyword> ~ 'extern'

:lexeme ~ <float keyword> priority => 1
<float keyword> ~ 'float'

:lexeme ~ <int keyword> priority => 1
<int keyword> ~ 'int'

:lexeme ~ <long keyword> priority => 1
<long keyword> ~ 'long'

:lexeme ~ <mutable keyword> priority => 1
<mutable keyword> ~ 'mutable'

:lexeme ~ <namespace keyword> priority => 1
<namespace keyword> ~ 'namespace'

:lexeme ~ <new keyword> priority => 1
<new keyword> ~ 'new'

:lexeme ~ <noexcept keyword> priority => 1
<noexcept keyword> ~ 'noexcept'

:lexeme ~ <operator keyword> priority => 1
<operator keyword> ~ 'operator'

:lexeme ~ <short keyword> priority => 1
<short keyword> ~ 'short'

:lexeme ~ <signed keyword> priority => 1
<signed keyword> ~ 'signed'

:lexeme ~ <static keyword> priority => 1
<static keyword> ~ 'static'

:lexeme ~ <struct keyword> priority => 1
<struct keyword> ~ 'struct'

:lexeme ~ <template keyword> priority => 1
<template keyword> ~ 'template'

:lexeme ~ <thread_local keyword> priority => 1
<thread_local keyword> ~ 'thread_local'

:lexeme ~ <typename keyword> priority => 1
<typename keyword> ~ 'typename'

:lexeme ~ <union keyword> priority => 1
<union keyword> ~ 'union'

:lexeme ~ <unsigned keyword> priority => 1
<unsigned keyword> ~ 'unsigned'

:lexeme ~ <using keyword> priority => 1
<using keyword> ~ 'using'

:lexeme ~ <void keyword> priority => 1
<void keyword> ~ 'void'

:lexeme ~ <volatile keyword> priority => 1
<volatile keyword> ~ 'volatile'

:lexeme ~ <wchar_t keyword> priority => 1
<wchar_t keyword> ~ 'wchar_t'

<comma keyword> ~ ','

:lexeme ~ <ellipses keyword> priority => 1
<ellipses keyword> ~ '...'

# See https://stackoverflow.com/questions/25800789/discard-and-skip-over-unstructured-text-with-perl-marpa
RestOfLine
  ::=           action => ::undef  # rest is optional
RestOfLine
  ::= THE_REST  action => ::undef  # matches anything

:lexeme ~ THE_REST priority => 1
THE_REST ~ [^\n]+

:discard ~ whitespace
whitespace ~ [\s]+

END_OF_DSL


my $grammar = Marpa::R2::Scanless::G->new( { source => \$dsl } );
my $recce;

my $doc;

sub insertXML {
    my ($doc, $tree) = @_;
    my $ignore = 0;
    if(ref($tree) eq "") {
	$doc->absorb($tree);
	return;
    }
    
    if(ref($tree) ne "HASH") {
	print "***** Not a hash: ". Dumper($tree);
    }
    
    foreach my $key (keys %$tree) {
	my $content = $$tree{$key};
	if(ref($content) eq "ARRAY") {
	    foreach my $value (@$content) {
		my @attributes;
		if(ref($value) eq "HASH") {
		    my ($childKey) = keys %$value;
		    if($childKey eq 'ignore') {
			@attributes = (class => 'ignore');
			$value = $$value{$childKey};
		    }
		}
		$doc->openElement('ltx:note', role => $key, @attributes);
		insertXML($doc, $value, $ignore);
		$doc->closeElement('ltx:note');
	    }
	} else {
	    my @attributes;
	    if(ref($content) eq "HASH") {
		my ($childKey) = keys %$content;
		if($childKey eq 'ignore') {
		    @attributes = (class => 'ignore');
		    $content = $$content{$childKey};
		}
	    }
	    $doc->openElement('ltx:note', role => $key, @attributes);
	    insertXML($doc, $content);
	    $doc->closeElement('ltx:note');
	}
    }
}

sub match_text {
    my @g1 = Marpa::R2::Context::location();
    my @span1 = $recce->g1_location_to_span($g1[0]);
    my @span2 = $recce->g1_location_to_span($g1[1]);
    return trim($recce->literal($span1[0] + $span1[1], $span2[0] + $span2[1] - $span1[0] - $span1[1]));
}
    
sub CodeProcess::do_dump {
    print "matched: ".match_text()."\n";
}

sub CodeProcess::pass_through {
    return $_[1];
}

sub CodeProcess::do_ignore {
    my $unignored = CodeProcess::do_grammar(@_);
    my ($key) = keys %$unignored;
    return { $key => { ignore => $$unignored{$key} } }
}

sub CodeProcess::do_grammar {
    my (undef, @args) = @_;
    my $rule_id     = $Marpa::R2::Context::rule;
    my $slg         = $Marpa::R2::Context::slg;

    my $is_quantitative = sub {
	my ($rule_id) = @_;
	if (substr($slg->rule_show($rule_id), -1) eq "+") {
	    return 1;
	}
	return 0;
    };
    
    my $nonterminal = $slg->symbol_display_form(($slg->rule_expand($rule_id))[0]);
    $nonterminal=~s/_/-/g;

    my %result;
    tie(%result, 'Tie::IxHash');

    my $optional = ($nonterminal =~ /^<optional /);
    print "nonterminal: $nonterminal:$optional\n";
    
    if($is_quantitative->($rule_id)) {
	my $arg0 = $args[0];
	my ($key) = keys %$arg0;
	my @values = map { $$_{$key} } grep { $_} @args;
	$result{$key} = \@values;
    } else {
	map { my $arg = $_; map { $result{$_} = $$arg{$_} } keys %$arg; } @args;
    }
    $result{match} = match_text();
    return $optional ? \%result : { $nonterminal => \%result };
}

sub CodeProcess::do_capture {
    my (undef, @args) = @_;
    my $rule_id     = $Marpa::R2::Context::rule;
    my $slg         = $Marpa::R2::Context::slg;
    my $nonterminal = $slg->symbol_display_form(($slg->rule_expand($rule_id))[0]);
    $nonterminal=~s/_/-/g;
    return { $nonterminal => $_[1] };
}

sub CodeProcess::do_capture_all {
    my (undef, @args) = @_;
    my $rule_id     = $Marpa::R2::Context::rule;
    my $slg         = $Marpa::R2::Context::slg;
    my $nonterminal = $slg->symbol_display_form(($slg->rule_expand($rule_id))[0]);
    $nonterminal=~s/_/-/g;
    return { $nonterminal => \@args };
}

sub CodeProcess::do_list {
    my (undef, @args) = @_;
    my $rule_id     = $Marpa::R2::Context::rule;
    my $slg         = $Marpa::R2::Context::slg;
    my $nonterminal = $slg->symbol_display_form(($slg->rule_expand($rule_id))[0]);
    $nonterminal=~s/_/-/g;
    if(scalar(@args) == 1) {
	return { $nonterminal => [$_[1]] };
    }
    my(undef, $args_so_far, $new_arg) = @_;
    my @result = @$$args_so_far{$nonterminal};
    push(@result, @$new_arg);
    return { $nonterminal => \@result };
}

sub CodeProcess::do_class {
    return { 'class-template' => {
	name => $_[2],
	match => match_text
	     }
    }
}

sub CodeProcess::do_class_template {
    return { 'class-template' => {
	name => $_[3],
	match => match_text
	     }
    }
}

sub CodeProcess::do_class_template_specialization {
    print "Class_template_specialization\n";
    my $simple_template_id = $_[3];
    my %result;
    tie(%result, 'Tie::IxHash');

    return { 'class-template-specialization' => {
	name => $$simple_template_id{'simple-template-id'}{match},
	map { $_ =>  $$simple_template_id{$_}} keys %$simple_template_id,
	match => match_text()
	     }
    }
}

sub CodeProcess::do_macro {
    return { macro => {
	name => $_[2],
	match => match_text
	     }
    }
}

sub CodeProcess::do_type_alias {
    print "in type alias\n";
    return { 'type-alias' => {
	name => $_[2],
	match => match_text
	     }
    }
}

sub CodeProcess::do_enum_class {
    return { 'enum-class' => {
	name => $_[3],
	match => match_text
	     }
    }
}

sub CodeProcess::do_enum {
    return { 'enum' => {
	name => $_[3],
	match => match_text
	     }
    }
}

# A.6 Declarations
sub CodeProcess::do_type_specifier_seq {
    (undef, my @args) = @_;

    # Follow the rules in dcl.type/2 for valid type-specifier-seqs
    my %counts = ('const' => 0, 'volatile' => 0, 'signed' => 0, 'unsigned' => 0,
		  'char' => 0, 'long' => 0, 'short' => 0, 'int' => 0, 'double' => 0);
    my $found_type_name = 0;
    foreach my $type_specifier (map { $$_{'type-specifier'} } (@args)) {
	my $is_type_name = 0;
	if (exists($$type_specifier{'simple-type-specifier'})) {
	    my $simple_type_specifier = $$type_specifier{'simple-type-specifier'};
	    if(ref($simple_type_specifier) eq 'HASH' && exists($$simple_type_specifier{'type-name'})) {
		if($found_type_name) {
		    Marpa::R2::Context::bail("Duplicate type-name (dcl.type/2): ".match_text());
		}
		$found_type_name = 1;
		$is_type_name = 1;
	    } 
	}
	if(!$is_type_name) {
	    $counts{$$type_specifier{match}}++;
	}
    }
    if($counts{const} > 1 || $counts{volatile} > 1) {
	Marpa::R2::Context::bail("Duplicate const or volatile (dcl.type/2): ".match_text());
    }
    $counts{const} = 0;
    $counts{volatile} = 0;
    my $total = sum(values %counts);
    if($found_type_name + $total == 0) {
	Marpa::R2::Context::bail("Need a non-cv type specifier (dcl.type/2): ".match_text());
    }
    
    if($found_type_name && $total) {
	Marpa::R2::Context::bail("Cannot modify type names (dcl.type/2): ".match_text());
    }

    if($counts{signed} + $counts{unsigned}) {
	if($counts{signed} + $counts{unsigned} > 1) {
	    Marpa::R2::Context::bail("Too many (un)signeds (dcl.type/2): ".match_text());
	}
	
	if($total != sum(map { $counts{$_} } ('signed', 'unsigned', 'char', 'long', 'short', 'int'))) {
	    Marpa::R2::Context::bail("(un)signed only modifies char/long/short/int (dcl.type/2): ".match_text());
	}
    }
    $counts{signed} = 0;
    $counts{unsigned} = 0;
    $total = sum(values %counts);
	    
    if($counts{long} > 2) {
	Marpa::R2::Context::bail("Too many longs".match_text());
    }

    if ($counts{long} == 2 && $total != $counts{long} + $counts{int}) {
	Marpa::R2::Context::bail("long long can only modify int".match_text());
    }
    
    if($counts{long} && $total != $counts{long} + $counts{int} + $counts{double}) {
	Marpa::R2::Context::bail("long only modifies long/int/double (dcl.type/2): ".match_text());
    }	
    $counts{long} = 0;
    if(sum(values %counts) > 1) {
	Marpa::R2::Context::bail("Too many type-specifiers in type-specifier-seq (dcl.type/2): ".match_text());
    }
    return CodeProcess::do_grammar(@_);
}

sub CodeProcess::do_balanced_token {
    my (undef, @args) = @_;
    my $balanced_token_seq = $args[1];
    my %result;
    tie(%result, 'Tie::IxHash', 
	punctuator => $args[0], 
	'balanced-token-seq' => $$balanced_token_seq{'balanced-token-seq'},
	punctuator => $args[0],
	'match' => match_text());
    return { balanced_token => \%result };
}

# A.11 Overloading
sub CodeProcess::do_operator {
    my (undef, @args) = @_;
    my $args0 = $args[0];
    my (undef, @tokens) = @$args0;
    return { operator => join('', @tokens) }
}

# A.12 Templates
sub CodeProcess::do_simple_template_id {
    my %result;
    tie(%result, 'Tie::IxHash', 'template-name' => $_[1],  'template-argument-list' => [], 'match' => match_text());
    return { "simple-template-id" => \%result};
}

DefConstructor('\@@listings@block {} {}',
	       sub {
		   my ($document, $index, $content, %props) = @_;
		   my $inHeader = $props{inHeader};
		   
		   if($inHeader) {
		       my $headerName = $props{headerName};
		       my $data_key      = 'LISTINGS_DATA_' . ToString($index);
		       my $listings_data = LookupValue($data_key);
		       $doc = $document;
		       
		       # print 'Dumping\n'.Dumper($value_ref);
		       print "HeaderName: $headerName\n";
		       $document->openElement('ltx:note', role => 'header', class => $headerName);
		       # my $value_ref = $grammar->parse( \$listings_data, 'CodeProcess');
		       $recce = Marpa::R2::Scanless::R->new( { grammar => $grammar,
							       semantics_package => 'CodeProcess',
							     ranking_method => 'rule' } );
		       my $length_read = $recce->read( \$listings_data );
		       my $value_ref;
		       do {
			   eval {
			       $value_ref = $recce->value;
			   };
		       } while ($@);
		       insertXML($doc, $$value_ref);
		       $document->closeElement('ltx:note');
		   }
		   $document->insertElement('ltx:listing',
					    $content,
					    data => $props{data},
					    datamimetype => $props{datamimetype},
					    dataencoding => $props{dataencoding}); },
	       afterDigest => sub {
		   my ($stomach, $whatsit) = @_;
		   # Could have some options about encoding?
		   my $data_key      = 'LISTINGS_DATA_' . ToString($whatsit->getArg(1));
		   print "std - $data_key\n";
		   my $listings_data = LookupValue($data_key);
		   if (is_utf8($listings_data)) {
		       $listings_data = encode('UTF-8', $listings_data);
		   }
		   my $data = encode_base64($listings_data);

		   my $inHeader = CounterValue('InHeader')->valueOf;
		   if($inHeader) {
	       		   print "AfterDigestHeaderName: ".LookupValue('HeaderName')."\n";
		   }
		   $whatsit->setProperties(data => $data,
					   inHeader => $inHeader,
					   headerName => LookupValue('HeaderName'),
					   datamimetype => 'text/plain',
					   dataencoding => 'base64'); },
	       locked => 1);

DefConstructor('\testConst {} {}', 
    sub {   my ($document, $one, $two, %props) = @_; 
            $document->absorb(Tokenize($props{foo})); },
    # '#foo',
    afterDigest => sub {
	my ($stomach, $whatsit) = @_;
	print $whatsit->getDefinition;
    # Could have some options about encoding?
    $whatsit->setProperties(foo => '<ltx:note></ltx:note>');},
  locked => 1);

#======================================================================
DefConstructor('\foo', sub {
    $doc = $_[0];
    print "Running style file\n\n\n";
    my $grammar = Marpa::R2::Scanless::G->new( { source => \$dsl } );
    $recce = Marpa::R2::Scanless::R->new(
	{ grammar => $grammar, semantics_package => 'CodeProcess', ranking_method => 'rule' } );

    my $input = << 'EOF';
  [[noreturn]] void abort() noexcept;
EOF
    my $length_read = $recce->read( \$input );
    my $value_ref;
    do {
	eval {
	    $value_ref = $recce->value;
	};
	print $@;
    } while ($@);

    insertXML($doc, $$value_ref);
	       });
 
1;

