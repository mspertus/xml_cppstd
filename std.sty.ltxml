# -*- mode: Perl -*-
# /=====================================================================\ #
# |  std                                                           | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;
use Regexp::Common;

LoadPool('LaTeX');
RequirePackage('listings');

DefMacro('\Cpp', 'C++');
DefMacro('\Cpp', 'D++');
NewCounter('InHeader');
    
DefMacro('\rSec Number [] Plain', sub {
    my $depth = ToString($_[1]);
    my $ref = ToString($_[2]);
    my $name = ToString($_[3]);

    my @res = Tokenize(qq(\\setcounter{SectionDepth}{$depth}
                             \\addtocounter{SectionDepth}{\\value{SectionDepthBase}}
                             \\Sec{\\arabic{SectionDepth}}[$ref]{$name}));
    if($name =~ m/Header\s+\\tcode\{<(\w+)\>}\s+synopsis/) {
	push(@res, (Tokenize('\setcounter{InHeader}{1}'), Invocation(T_CS('\header'), $1)));
    } else {
	push(@res, (Tokenize('\setcounter{InHeader}{0}')));
    }
    return @res;
},

 locked => 1);

DefConstructor('\header{}', '<ltx:note role="header">#1</ltx:note>', mode => 'text');

DefConstructor('\@@listings@block {} {}',
	       sub {
		   my ($document, $index, $content, %props) = @_;
		   my $inHeader = $props{inHeader};

		   if($inHeader) {
		       my $data_key      = 'LISTINGS_DATA_' . ToString($index);
		       my $listings_data = LookupValue($data_key);
		       $document->openElement('ltx:note', role => 'synopsis');
		       $document->closeElement('ltx:note');
		   }
		   $document->insertElement('ltx:listing',
					    $content,
					    data => $props{data},
					    datamimetype => $props{datamimetype},
					    dataencoding => $props{dataencoding}); },
	       afterDigest => sub {
		   my ($stomach, $whatsit) = @_;
		   # Could have some options about encoding?
		   my $data_key      = 'LISTINGS_DATA_' . ToString($whatsit->getArg(1));
		   print "std - $data_key\n";
		   my $listings_data = LookupValue($data_key);
		   if (is_utf8($listings_data)) {
		       $listings_data = encode('UTF-8', $listings_data);
		   }
		   my $data = encode_base64($listings_data);

		   my $inHeader = CounterValue('InHeader')->valueOf;
		   $whatsit->setProperties(data => $data,
					   inHeader => $inHeader,
					   datamimetype => 'text/plain',
					   dataencoding => 'base64'); },
	       locked => 1);

DefConstructor('\testConst {} {}', 
    sub {   my ($document, $one, $two, %props) = @_; 
            $document->absorb(Tokenize($props{foo})); },
    # '#foo',
    afterDigest => sub {
	my ($stomach, $whatsit) = @_;
	print $whatsit->getDefinition;
    # Could have some options about encoding?
    $whatsit->setProperties(foo => '<ltx:note></ltx:note>');},
  locked => 1);

#======================================================================
1;

