# -*- mode: Perl -*-
# /=====================================================================\ #
# |  std                                                           | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;
use String::Util 'trim';
use List::Util 'sum', 'all';
use Marpa::R2;
use Data::Dumper;
use Tie::IxHash;

LoadPool('LaTeX');
# RequirePackage('listings');

DefMacro('\Cpp', 'C++');
NewCounter('InHeader');
    
DefMacro('\rSec Number [] Plain', sub {
    my $depth = ToString($_[1]);
    my $ref = ToString($_[2]);
    my $name = ToString($_[3]);

    my @res = Tokenize(qq(\\setcounter{SectionDepth}{$depth}
                             \\addtocounter{SectionDepth}{\\value{SectionDepthBase}}
                             \\Sec{\\arabic{SectionDepth}}[$ref]{$name}));
    if($name =~ m/Header\s+\\tcode\{<(\w+)\>}\s+synopsis/) {
	push(@res, (Tokenize('\setcounter{InHeader}{1}'), Invocation(T_CS('\header'), $1)));
    } else {
	push(@res, (Tokenize('\setcounter{InHeader}{0}')));
    }
    return @res;
},

 locked => 1);

DefConstructor('\header{}', 
	       '', 
	       mode => 'text',
	       afterDigest => sub {
		   my ($stomach, $whatsit) = @_;
		   print "Whatsitarg:".ToString($whatsit->getArg(1))."\n";
		   AssignValue('HeaderName', ToString($whatsit->getArg(1)), 'global');
		   return;
	       }
);

sub bail {
    Marpa::R2::Context::bail($_[0].": ".match_text());
}

my $recce;

sub match_text {
    my @g1 = Marpa::R2::Context::location();
    my @span1 = $recce->g1_location_to_span($g1[0]);
    my @span2 = $recce->g1_location_to_span($g1[1]);
    return trim($recce->literal($span1[0] + $span1[1], $span2[0] + $span2[1] - $span1[0] - $span1[1]));
}

my $lazy_start = ":start ::= declaration_seq\n";
my $eager_start = ":start ::= declaration\n";
    
my $dsl = <<'END_OF_DSL';
:default ::= action => do_grammar
lexeme default = latm => 1

comment ::= '//' (RestOfLine) action => do_capture

# A.1 Keywords
class_name ::=
      identifier 
    | simple_template_id 

# A.2 Lexical Conventions
token ::= identifier  # TODO: Full definition and propagate changes to balanced_token
    | operator 

string_literal ::= ('"') s_char_sequence ('"') action => do_capture

s_char_sequence ~ s_char+
s_char ~ [^"\\\n]

# A.4 Expressions
id_expression ::= unqualified_id  # TODO: Full definition
unqualified_id ::=         # todo: Full definition
      identifier 
    | operator_function_id

# A.6 Declarations
declaration_seq ::= 
      deferred_namespace                               rank => 2 action => do_deferred
    | comment                                          rank => 1 action => do_deferred 
    | deferred_preprocessor                            rank => 1 action => do_deferred
    | deferred_semi_delimited                                    action => do_deferred
    | declaration_seq deferred_namespace      rank => 2 action => do_deferred_seq
    | declaration_seq comment                 rank => 1 action => do_deferred_seq
    | declaration_seq deferred_preprocessor   rank => 1 action => do_deferred_seq
    | declaration_seq deferred_semi_delimited           action => do_deferred_seq

deferred_namespace ::=
    <namespace keyword> identifier '{' brace_balanced '}' action => do_capture

deferred_preprocessor ::=
    '#' RestOfLine action => do_capture

deferred_semi_delimited ::= non_semis ';' action => do_capture
non_semis ::= non_semi+ action => pass_through
non_semi ::= punctuation | <ident> action => pass_through

declaration ::=                # TODO: Correct definition
      block_declaration 
    | template_declaration 
    | explicit_specialization 
    | linkage_specification 
    | namespace_definition 
    | control_line  # Since we don't expand macros
    | comment action => do_ignore_1
    | storage_class_specifier action => do_ignore_1
    | operator action => do_ignore_1
    | identifier action => do_ignore_1
    | punctuation action => do_ignore_1

block_declaration ::=
      simple_declaration 
    | alias_declaration 
    | opaque_enum_declaration action => do_grammar_1  # enum foo; is an enumeration. Not a variable of type enum

alias_declaration ::=
      (<using keyword>) identifier ('=') defining_type_id (';') 
    | (<using keyword>) identifier ('=') defining_type_id abstract_declarator (';') 

simple_declaration ::= decl_specifier_seq (';') 
    | decl_specifier_seq init_declarator_list (';') 
    | attribute_specifier_seq decl_specifier_seq (';') 
    | attribute_specifier_seq decl_specifier_seq init_declarator_list (';') 

decl_specifier ::= 
      storage_class_specifier  # todo: Full definition
    | defining_type_specifier
    | <friend keyword>
    | <typedef keyword>
    | <constexpr keyword>
    | <inline keyword>

decl_specifier_seq ::= decl_specifier+ action => do_decl_specifier_seq # TODO: Full definition

storage_class_specifier ::= 
      <static keyword> action => do_capture
    | <thread_local keyword> action => do_capture
    | <extern keyword> action => do_capture
    | <mutable keyword> action => do_capture

type_specifier ::= 
      simple_type_specifier  # TODO: Full definition
    | elaborated_type_specifier 
    | cv_qualifier 

type_specifier_seq ::= type_specifier+ action => do_type_specifier_seq # TODO: Full definition

defining_type_specifier ::= 
      type_specifier  # TODO: Full definition
    | enum_specifier 

defining_type_specifier_seq ::=      # TODO: Full definition
    defining_type_specifier+ action => do_defining_type_specifier_seq

simple_type_specifier ::= type_name  # TODO: Full definition
    | <char keyword> action => do_capture
    | <char16_t keyword> action => do_capture
    | <char32_t keyword> action => do_capture
    | <wchar_t keyword> action => do_capture
    | <bool keyword> action => do_capture
    | <short keyword> action => do_capture
    | <int keyword> action => do_capture
    | <long keyword> action => do_capture
    | <signed keyword> action => do_capture
    | <unsigned keyword> action => do_capture
    | <float keyword> action => do_capture
    | <double keyword> action => do_capture
    | <void keyword> action => do_capture
    | <auto keyword> action => do_capture


type_name ::= identifier  # TODO: Correct definition

elaborated_type_specifier ::=    # todo: Full definition
      class_key <optional attribute_specifier_seq> identifier 
    | class_key simple_template_id 

enum_specifier ::=           # todo: Full definition
    enum_head ('{') enumerator_list ('}') 

enum_head ::=
    enum_key <optional enum_head_name> <optional enum_base> 
<optional enum_head> ::= enum_head 
<optional enum_head> ::= 


enum_head_name ::=             # todo: Full definition
    identifier  
<optional enum_head_name> ::= enum_head_name 
<optional enum_head_name> ::= 

# Note. Standard synopses have illegal opaque enum declarations, such as
# float_round_style in limits.syn. We accept these to parse the standard
opaque_enum_declaration ::=      # todo: Full definition
    enum_key identifier <optional enum_base> (';') 

enum_key ::=
      <enum keyword> action => do_capture
    | <enum keyword> <class keyword> action => do_capture
    | <enum keyword> <struct keyword> action => do_capture

enum_base ::=      # todo: Full definition
    (':') type_specifier_seq 
<optional enum_base> ::= enum_base 
<optional enum_base> ::= 

enumerator_list ::=
    enumerator_definition* separator => <comma keyword>  

enumerator_definition ::= # todo: Full definition
    enumerator

enumerator ::=     # todo: Full definition
    identifier 

namespace_definition ::= named_namespace_definition  # TODO: Full definition

named_namespace_definition # TODO: Full definition
    ::= (<namespace keyword>) identifier ('{') namespace_body ('}') 
        |  (<namespace keyword>) identifier ('{') ('}') 

namespace_body ::= declaration_seq 


linkage_specification ::= (<extern keyword>) string_literal ('{') ('}') 
    | (<extern keyword>) string_literal ('{') declaration_seq ('}') 
    |  (<extern keyword>) string_literal declaration 

attribute_specifier_seq ::= attribute_specifier+ 
<optional attribute_specifier_seq> ::= attribute_specifier_seq 
<optional attribute_specifier_seq> ::= 

attribute_specifier ::= ('[') ('[') attribute_list (']') (']')  

attribute_list ::= attribute+ separator => <comma keyword>  # TODO: full specification

attribute ::= attribute_token 
    | attribute_token attribute_argument_clause 

attribute_token ::= identifier  # TODO: full definition

attribute_argument_clause ::= ('(') (')') action => do_capture
    | ('(') (')') 

balanced_token_seq ::= balanced_token+ 

balanced_token ::= '(' balanced_token_seq ')' action => do_balanced_token
    | '[' balanced_token_seq ']' action => do_balanced_token
    | '{' balanced_token_seq '}' action => do_balanced_token
    | token  # TODO: Change when tokens include grouping characters

# A.7 Declarators
init_declarator_list ::= init_declarator+ separator => <comma keyword> 

init_declarator ::= declarator  # TODO: Full definition

declarator ::=
    ptr_declarator  # TODO: Full definition
<optional declarator> ::= declarator 
<optional declarator> ::= 


ptr_declarator ::= noptr_declarator 
    | ptr_operator ptr_declarator 

noptr_declarator ::= declarator_id  # TODO: Full definition
    | noptr_declarator parameters_and_qualifiers 

parameters_and_qualifiers ::=  # TODO: Full definition
    ('(') parameter_declaration_clause (')') <optional noexcept_specifier> 
    | ('(') (')') <optional noexcept_specifier> 

ptr_operator ::= '*' action => do_capture # TODO: Full definition
    | '&' action => do_capture
    | '&&' action => do_capture

cv_qualifier ::= <const keyword> action => do_capture | <volatile keyword> action => do_capture

cv_qualifier_seq ::= cv_qualifier+ 

declarator_id ::= id_expression  
    | ellipses id_expression 

type_id ::= type_specifier_seq action => pass_through # TODO: Full definition

defining_type_id ::=                      # TODO: Full definition
    defining_type_specifier_seq 

abstract_declarator ::=                   # TODO: Full definition
      ptr_abstract_declarator 
<optional abstract_declarator> ::= abstract_declarator 
<optional abstract_declarator> ::= 


ptr_abstract_declarator ::=
      noptr_abstract_declarator 
    | ptr_operator 
    | ptr_operator ptr_abstract_declarator 

noptr_abstract_declarator ::=             # TODO: Full definition
      parameters_and_qualifiers 

parameter_declaration_clause ::= parameter_declaration_list  # TODO: Full definition

parameter_declaration_list ::=                                # TODO: Full definition
    parameter_declaration+ separator => <comma keyword> 


parameter_declaration ::=                                                       # TODO: Full definition
      decl_specifier_seq declarator  # TODO: Full definition
    | attribute_specifier_seq  decl_specifier_seq declarator 
    | decl_specifier_seq <optional abstract_declarator> 
    | attribute_specifier_seq decl_specifier_seq <optional abstract_declarator> 

# A.8 Classes
class_key ::= <class keyword> action => do_capture
    | <struct keyword> action => do_capture
    | <union keyword> action => do_capture

class_head ::= # todo: Full definition
    class_key <optional attribute_specifier_seq> class_head_name 
           <optional class_virt_specifier> 

class_head_name ::=     #todo: Full definition
    class_name 

class_virt_specifier ::=
    <final keyword> action => do_capture
<optional class_virt_specifier> ::= class_virt_specifier 
<optional class_virt_specifier> ::= 

# A.11 Overloading
operator_function_id ::= (<operator keyword>) operator

operator ::= <new keyword> | <delete keyword> | <new keyword> '[]' | <delete keyword> '[]'
    | '()' | '[]' | '->' | '->*' 
    | '~' | '!' | '+' | '-' | '*' | '/' | '%' | '^' | '&' | '|'
    | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '^=' | '&=' | '|=' | '==' | '!='
    | '<' | '>' | '<=' | '>=' | '<=>' | '&&' | '||' | '<<' | '>>' | '<<=' | '>>='
    | '++' | '--' | ','

# A.12 Templates
template_declaration      # todo: Full definition
    ::= template_head declaration 

template_head             # todo: Full definition
    ::= (<template keyword>) ('<') template_parameter_list ('>')  

template_parameter_list ::= 
    template_parameter+ separator => <comma keyword> 

template_parameter ::= type_parameter  # TODO: Full definition

type_parameter ::= type_parameter_key 
    | type_parameter_key ellipses 
    | type_parameter_key identifier 
    | type_parameter_key ellipses identifier 
    | type_parameter_key ('=') type_id 
    | type_parameter_key identifier ('=') type_id 
    | template_head type_parameter_key 
    | template_head type_parameter_key ellipses 
    | template_head type_parameter_key identifier 
    | template_head type_parameter_key ellipses identifier 
    | type_parameter_key ('=') type_id 
    | type_parameter_key identifier ('=') 


type_parameter_key ::= <class keyword> action => do_capture | <typename keyword> action => do_capture

simple_template_id ::= template_name ('<') template_argument_list ('>') 

template_name ::= <ident> action => do_capture

template_argument_list ::= template_argument*  # TODO: actions

template_argument ::= type_id action => do_capture # TODO: Full definition

explicit_specialization ::=
    (<template keyword>) ('<') ('>') declaration 

# A.13 Exception handling
noexcept_specifier ::= <noexcept keyword> action => do_capture # TODO: Full definition
<optional noexcept_specifier> ::= noexcept_specifier 
<optional noexcept_specifier> ::= 

# A.14 Preprocessing directives
control_line ::=  # TODO: Full definition
    ('#define') identifier replacement_list  

replacement_list ::= # TODO: Full definition (but seems unlikely this is worthwhile)
    RestOfLine action => do_capture

identifier ::= <ident> action => do_capture
    | standard_directive 

standard_directive ::= ('@') non_at ('@') action => do_capture
punctuation ::= <punctuation token> action => do_capture
ellipses ::= (<ellipses keyword>) action => do_capture

<ident> ~ [\w]+
<punctuation token> ~ [^\s\w;] # TODO: This is all wrong
non_at ~ [^@]+

# Keywords
:lexeme ~ <auto keyword> priority => 1
<auto keyword> ~ 'auto'

:lexeme ~ <bool keyword> priority => 1
<bool keyword> ~ 'bool'

:lexeme ~ <char keyword> priority => 1
<char keyword> ~ 'char'

:lexeme ~ <char16_t keyword> priority => 1
<char16_t keyword> ~ 'char16_t'

:lexeme ~ <char32_t keyword> priority => 1
<char32_t keyword> ~ 'char32_t'

:lexeme ~ <class keyword> priority => 1
<class keyword> ~ 'class'

:lexeme ~ <const keyword> priority => 1
<const keyword> ~ 'const'

:lexeme ~ <constexpr keyword> priority => 1
<constexpr keyword> ~ 'constexpr'

:lexeme ~ <delete keyword> priority => 1
<delete keyword> ~ 'delete'

:lexeme ~ <double keyword> priority => 1
<double keyword> ~ 'double'

enum ::= <enum keyword> action => do_capture
:lexeme ~ <enum keyword> priority => 1
<enum keyword> ~ 'enum'

:lexeme ~ <extern keyword> priority => 1
<extern keyword> ~ 'extern'

:lexeme ~ <final keyword> priority => 1
<final keyword> ~ 'final'

:lexeme ~ <float keyword> priority => 1
<float keyword> ~ 'float'

:lexeme ~ <friend keyword> priority => 1
<friend keyword> ~ 'friend'

:lexeme ~ <inline keyword> priority => 1
<inline keyword> ~ 'inline'

:lexeme ~ <int keyword> priority => 1
<int keyword> ~ 'int'

:lexeme ~ <long keyword> priority => 1
<long keyword> ~ 'long'

:lexeme ~ <mutable keyword> priority => 1
<mutable keyword> ~ 'mutable'

:lexeme ~ <namespace keyword> priority => 1
<namespace keyword> ~ 'namespace'

:lexeme ~ <new keyword> priority => 1
<new keyword> ~ 'new'

:lexeme ~ <noexcept keyword> priority => 1
<noexcept keyword> ~ 'noexcept'

:lexeme ~ <operator keyword> priority => 1
<operator keyword> ~ 'operator'

:lexeme ~ <short keyword> priority => 1
<short keyword> ~ 'short'

:lexeme ~ <signed keyword> priority => 1
<signed keyword> ~ 'signed'

:lexeme ~ <static keyword> priority => 1
<static keyword> ~ 'static'

:lexeme ~ <struct keyword> priority => 1
<struct keyword> ~ 'struct'

:lexeme ~ <template keyword> priority => 1
<template keyword> ~ 'template'

:lexeme ~ <thread_local keyword> priority => 1
<thread_local keyword> ~ 'thread_local'

:lexeme ~ <typedef keyword> priority => 1
<typedef keyword> ~ 'typedef'

:lexeme ~ <typename keyword> priority => 1
<typename keyword> ~ 'typename'

:lexeme ~ <union keyword> priority => 1
<union keyword> ~ 'union'

:lexeme ~ <unsigned keyword> priority => 1
<unsigned keyword> ~ 'unsigned'

:lexeme ~ <using keyword> priority => 1
<using keyword> ~ 'using'

:lexeme ~ <void keyword> priority => 1
<void keyword> ~ 'void'

:lexeme ~ <volatile keyword> priority => 1
<volatile keyword> ~ 'volatile'

:lexeme ~ <wchar_t keyword> priority => 1
<wchar_t keyword> ~ 'wchar_t'

<comma keyword> ~ ','

:lexeme ~ <ellipses keyword> priority => 1
<ellipses keyword> ~ '...'

brace_balanced ::= 
      non_braces action => do_capture
    | '{' brace_balanced '}' action => do_capture
    | non_braces '{' brace_balanced '}' action => do_capture
    | '{' brace_balanced '}' brace_balanced action => do_capture
    | non_braces '{' brace_balanced '}' brace_balanced action => do_capture
brace_balanced ::=


non_braces ~ [^{}]+

# See https://stackoverflow.com/questions/25800789/discard-and-skip-over-unstructured-text-with-perl-marpa
RestOfLine
  ::=     action => pass_through  # rest is optional
RestOfLine
  ::= THE_REST action => pass_through  # matches anything

:lexeme ~ THE_REST priority => 1
THE_REST ~ [^\n]+

:discard ~ whitespace
whitespace ~ [\s]+

:discard ~ itcorr_minus_one
itcorr_minus_one ~ '@\itcorr[-1]@' 
END_OF_DSL


my $doc;

my $eager_grammar = Marpa::R2::Scanless::G->new( { source => \($eager_start.$dsl) } );

sub parseCode {
    my ($grammar, $input) = @_;
    $recce = Marpa::R2::Scanless::R->new(
	{ grammar => $grammar, semantics_package => 'CodeProcess', ranking_method => 'rule' } );
    my $length_read = $recce->read( \$input );
    my $value_ref;
    my $matches = 0;
    my $rank = -1000000;
    my $parse_tree;
    
    do {
	eval {
	    $value_ref = $recce->value;
	    if($value_ref) {
		my $value = $$value_ref;
		my ($my_rank, $my_parse_tree) = @$value;
		if($my_rank > $rank) {
		    $rank = $my_rank;
		    $parse_tree = $my_parse_tree;
		}
	    }
	};
    } while ($@ || $value_ref);
    return $parse_tree;
}

sub insertXML {
    my ($doc, $tree) = @_;
    my $ignore = 0;
    if(ref($tree) eq "") {
	$doc->absorb($tree);
	return;
    }
    
    if(ref($tree) ne "HASH") {
	print "***** Not a hash: ". Dumper($tree);
    }

    foreach my $key (keys %$tree) {
	if($key =~ /^deferred/) {
	    foreach my $deferred (@{$$tree{$key}}) {
		my $parse_tree = parseCode($eager_grammar, $deferred);
		insertXML($doc, $parse_tree);
	    }
	    next;
	}
	my $content = $$tree{$key};
	if(ref($content) eq "ARRAY") {
	    foreach my $value (@$content) {
		my @attributes;
		if(ref($value) eq "HASH") {
		    my ($childKey) = keys %$value;
		    if($childKey eq 'ignore') {
			@attributes = (class => 'ignore');
			$value = $$value{$childKey};
		    }
		}
		$doc->openElement('ltx:note', role => $key, @attributes);
		insertXML($doc, $value);
		$doc->closeElement('ltx:note');
	    }
	} else {
	    my @attributes;
	    if(ref($content) eq "HASH") {
		my ($childKey) = keys %$content;
		if($childKey eq 'ignore') {
		    @attributes = (class => 'ignore');
		    $content = $$content{$childKey};
		}
	    }
	    $doc->openElement('ltx:note', role => $key, @attributes);
	    insertXML($doc, $content);
	    $doc->closeElement('ltx:note');
	}
    }
}

my $grammar = Marpa::R2::Scanless::G->new( { source => \$dsl } );

sub nonterminal {
    my $rule_id     = $Marpa::R2::Context::rule;
    my $slg         = $Marpa::R2::Context::slg;
    my $nonterminal = $slg->symbol_display_form(($slg->rule_expand($rule_id))[0]);
    $nonterminal=~s/_/-/g;
    return $nonterminal;
}

sub extract_rank {
    my ($rank, undef, @ranked) = @_;
    my @deranked = map { my ($r, $i) = @$_; $rank += $r; $i } @ranked;
    return ($rank, \@deranked);
};

sub CodeProcess::do_deferred {
    return [0, { 'declaration-seq' => {'deferred-declaration' => [ match_text() ] } }];
}

sub CodeProcess::do_deferred_seq {
    my $declarations = $_[1]->[1]->{'declaration-seq'}->{'deferred-declaration'};
    push(@$declarations, (values %{$_[2]->[1]}));
    return [0, { 'declaration-seq' => {'deferred-declaration' => $declarations } }];
}
 
sub CodeProcess::do_dump {
    print "matched: ".Dumper(@_)."\n";
    my $result = CodeProcess::do_grammar(@_);
    print "result: ".Dumper($result);
    return $result;
}

sub CodeProcess::pass_through {
    return $_[1];
}

sub CodeProcess::do_ignore_inner {
    my $unignored = CodeProcess::do_grammar_inner(@_);
    my ($rank, $item) = @$unignored;
    if(ref($item) ne 'HASH') {
	print "***Oops: ".Dumper($unignored);
    };
    my ($key) = keys %$item;
    return [ $rank, { $key => { ignore => $$item{$key} } }]
}

sub CodeProcess::do_ignore {
    return CodeProcess::do_ignore_inner(0, @_);
}

sub CodeProcess::do_ignore_1 {
    return CodeProcess::do_ignore_inner(-1, @_);
}

sub CodeProcess::do_grammar_inner {
  
    my $rule_id     = $Marpa::R2::Context::rule;
    my $slg         = $Marpa::R2::Context::slg;

    my $is_quantitative = sub {
	my ($rule_id) = @_;
	if (substr($slg->rule_show($rule_id), -1) eq "+") {
	    return 1;
	}
	return 0;
    };
    my $nonterminal = $slg->symbol_display_form(($slg->rule_expand($rule_id))[0]);
    $nonterminal=~s/_/-/g;


    my %result;
    tie(%result, 'Tie::IxHash');
    if(all { ref($_) eq "" } @_[2 .. $#_]) {
	return [$_[0], { $nonterminal => match_text}];
    }

    my ($rank, $deranked) = extract_rank (@_);
    my @args = @$deranked;
	    
    my $optional = ($nonterminal =~ /^<optional /);
    
    if($is_quantitative->($rule_id)) {
	my $arg0 = $args[0];
	my ($key) = keys %$arg0;
	my @values = map { $$_{$key} } grep { $_} @args;
	$result{$key} = \@values;
    } else {
	map { my $arg = $_; map { $result{$_} = $$arg{$_} } keys %$arg; } @args;
    }
    $result{match} = match_text();
    return [$rank, $optional ? \%result : { $nonterminal => \%result }];
}

sub CodeProcess::do_grammar {
    return CodeProcess::do_grammar_inner(0, @_);
}

sub CodeProcess::do_grammar_1 {
    return CodeProcess::do_grammar_inner(1, @_);
}
    
sub CodeProcess::do_capture {
    my (undef, @args) = @_;
    my $nonterminal = nonterminal();
    return [0, { $nonterminal => match_text() }];
}

sub CodeProcess::do_list {
    my ($rank, $deranked) = extract_rank (0, @_);
    my @args = @$deranked;
    my $nonterminal = nonterminal();

    if(scalar(@args) == 1) {
	return [$rank, { $nonterminal => [$_[1]] }];
    }
    my(undef, $args_so_far, $new_arg) = @_;
    my @result = @$$args_so_far{$nonterminal};
    push(@result, @$new_arg);
    return [$rank, { $nonterminal => \@result }];
}

# A.6 Declarations
sub CodeProcess::do_decl_specifier_seq {
    my ($rank, $deranked) = extract_rank (0, @_);
    my @args = @$deranked;
    my @decl_specifiers = map { $$_{'decl-specifier'}} @args;

    # Follow the rules in dcl.spec for valid decl-specifier-seqs
    # dcl.spec/2 Each decl-specifier can only appear once, except long, which can appear twice
    my %counts = ( long => 0);
    my $non_cv_defining_type_specifier_seen = 0;
  
    # The rules in dc.spec/3 seem too restrictive. Using dcl.type/2 instead
    validate_type_specifier_seq (
	grep { ref($_) eq 'HASH' and exists($$_{'defining-type-specifier'}) } @decl_specifiers);
    
    foreach (@decl_specifiers) {
	$counts{ref($_) eq 'HASH' ? $$_{match} : $_}++;
    }
    
    if($counts{long} > 2) {
	bail("Too many longs in decl-specifier-seq (dcl.spec/2)")
    }
    $counts{long} = 0;
    if (max(values %counts) > 1) {
	bail("Duplicate decl-specifiers in decl-specifier-seq (dcl.spec/2)")
    }
 
    return CodeProcess::do_grammar(@_);
}

sub validate_type_specifier_seq {
    my @args = @_;
    # Follow the rules in dcl.type/2 for valid type-specifier-seqs
    my %counts = ('const' => 0, 'volatile' => 0, 'signed' => 0, 'unsigned' => 0,
		  'char' => 0, 'long' => 0, 'short' => 0, 'int' => 0, 'double' => 0);

    # The 'match' element of the sequence is not a specifier.
    my @specifiers = map {my $spec = $_; map { $$spec{$_} } (grep !/^match$/, (keys %$spec)) } @args;

    foreach my $specifier (@specifiers) {
	$counts{$$specifier{match}}++;
    }
    
    if($counts{const} > 1 || $counts{volatile} > 1) {
	bail("Duplicate const or volatile (dcl.type/2): ");
    }
    $counts{const} = 0;
    $counts{volatile} = 0;
    
    my $total = sum(values %counts);
    my $found_type = 0;

    if($counts{signed} + $counts{unsigned}) {
	$found_type = 1;
	if($counts{signed} + $counts{unsigned} > 1) {
	    bail("Too many (un)signeds (dcl.type/2): ");
	}
	
	if($total != sum(map { $counts{$_} } ('signed', 'unsigned', 'char', 'long', 'short', 'int'))) {
	    bail("(un)signed only modifies char/long/short/int (dcl.type/2)");
	}

	$counts{signed} = 0;
	$counts{unsigned} = 0;
	$total = sum(values %counts);
    }

    if($counts{long}) {
	$found_type = 1;
	if($counts{long} == 1) {
	    if($total != $counts{long} + $counts{int} + $counts{double} + $counts{signed} + $counts{unsigned}) {
		bail("long only modifies long/int/double (dcl.type/2)");
	    }
	} elsif($counts{long} == 2) {
	    if ($counts{long} == 2 && $total != $counts{long} + $counts{int}) {
		bail("long long can only modify int");
	    }
	} elsif($counts{long} > 2) {
	    bail("Too many longs");
	}

	$counts{long} = 0;
	$total = sum(values %counts);
    }
        
    if($total > 1) {
	bail("Too many specifiers in sequence (dcl.type/2)");
    }
    
    if(!$found_type && !$total) {
	bail("No non-modifying specifiers in sequence (dcl.type/3)");
    }	
}

sub CodeProcess::do_defining_type_specifier_seq {
    my ($rank, $deranked) = extract_rank (0, @_);
    my @args = @$deranked;

    validate_type_specifier_seq(@args);
    return CodeProcess::do_grammar(@_);
}

sub CodeProcess::do_type_specifier_seq {
    my ($rank, $deranked) = extract_rank (0, @_);
    my @args = @$deranked;

    validate_type_specifier_seq(@args);
    return CodeProcess::do_grammar(@_);
}

sub CodeProcess::do_balanced_token {
    my ($rank, $deranked) = extract_rank (0, @_);
    my @args = @$deranked;

    my $balanced_token_seq = $args[1];
    my %result;
    tie(%result, 'Tie::IxHash', 
	punctuator => $args[0], 
	'balanced-token-seq' => $$balanced_token_seq{'balanced-token-seq'},
	punctuator => $args[0],
	'match' => match_text());
    return [0, { balanced_token => \%result }];
}

# A.11 Overloading
sub CodeProcess::do_operator {
    print "in operator";
    my (undef, @args) = @_;
    my $args0 = $args[0];
    my (undef, @tokens) = @$args0;
    return [0, { operator => join('', @tokens) }]
}

# A.12 Templates
sub CodeProcess::do_simple_template_id {
    my ($rank, $deranked) = extract_rank (0, @_);
    my @args = @$deranked;
    my %result;
    tie(%result, 'Tie::IxHash', 'template-name' => $args[0],  'template-argument-list' => [], 'match' => match_text());
    return { "simple-template-id" => \%result};
}

DefConstructor('\@@listings@block {} {}',
	       sub {
		   my ($document, $index, $content, %props) = @_;
		   my $inHeader = $props{inHeader};
		   
		   if($inHeader) {
		       my $headerName = $props{headerName};
		       my $data_key      = 'LISTINGS_DATA_' . ToString($index);
		       my $listings_data = LookupValue($data_key);
		       $doc = $document;
		       
		       # print 'Dumping\n'.Dumper($value_ref);
		       print "HeaderName: $headerName\n";
		       $document->openElement('ltx:note', role => 'header', class => $headerName);
		       # my $value_ref = $grammar->parse( \$listings_data, 'CodeProcess');
		       $recce = Marpa::R2::Scanless::R->new( { grammar => $grammar,
							       semantics_package => 'CodeProcess',
							     ranking_method => 'rule' } );
		       my $length_read = $recce->read( \$listings_data );
		       my $value_ref;
		       do {
			   eval {
			       $value_ref = $recce->value;
			   };
		       } while ($@);
		       insertXML($doc, $$value_ref);
		       $document->closeElement('ltx:note');
		   }
		   $document->insertElement('ltx:listing',
					    $content,
					    data => $props{data},
					    datamimetype => $props{datamimetype},
					    dataencoding => $props{dataencoding}); },
	       afterDigest => sub {
		   my ($stomach, $whatsit) = @_;
		   # Could have some options about encoding?
		   my $data_key      = 'LISTINGS_DATA_' . ToString($whatsit->getArg(1));
		   print "std - $data_key\n";
		   my $listings_data = LookupValue($data_key);
		   if (is_utf8($listings_data)) {
		       $listings_data = encode('UTF-8', $listings_data);
		   }
		   my $data = encode_base64($listings_data);

		   my $inHeader = CounterValue('InHeader')->valueOf;
		   if($inHeader) {
	       		   print "AfterDigestHeaderName: ".LookupValue('HeaderName')."\n";
		   }
		   $whatsit->setProperties(data => $data,
					   inHeader => $inHeader,
					   headerName => LookupValue('HeaderName'),
					   datamimetype => 'text/plain',
					   dataencoding => 'base64'); },
	       locked => 1);

DefConstructor('\testConst {} {}', 
    sub {   my ($document, $one, $two, %props) = @_; 
            $document->absorb(Tokenize($props{foo})); },
    afterDigest => sub {
	my ($stomach, $whatsit) = @_;
	print $whatsit->getDefinition;
    # Could have some options about encoding?
    $whatsit->setProperties(foo => '<ltx:note></ltx:note>');},
  locked => 1);

#======================================================================
DefConstructor('\foo', sub {
    $doc = $_[0];
    print "Running style file\n\n\n";
    my $grammar = Marpa::R2::Scanless::G->new( { source => \($lazy_start.$dsl) } );
	       
    my $input = << 'EOF';
namespace std {
  enum class byte : unsigned char {};
}
EOF

    my $parse_tree = parseCode($grammar, $input);
    print Dumper($parse_tree);
    insertXML($doc, $parse_tree);
	       });
 
1;

